Copyright Radu-Andrei Dumitrescu 322CA  2020

1. Analiza binarului
	- pentru a rezolva acest task am folosit objdump ca sa extrag codul, iar gdb pentru a trece prin program pas cu pas.
	- am ajuns la concluzia ca functia vulnerabila este print_flag si are adresa 08049291
	- vulnerabilitatea apare cand se face "call eax", adica la adresa 8049327 pentru ca eax nu contine adresa unei functii,
	  ci o valoare oarecare citita de noi
2. Spargerea binarului
	- flag: NICE_FLAG{f19461f74915cde66367f80b82edb3fc}
	- am facut un one liner pentru a genera random 500 caractere: tr -dc A-Za-z0-9 </dev/urandom | head -c 500
	- apoi am folosit gdb cu break point in main pana am ajuns unde se face "call eax"
	- am printat valoarea lui eax pentru a vedea ce 4 caractere are in el si apoi am verificat in fisierul text unde sunt acele 4 caractere
	- am sters de la acele 4 caractere tot pana la final de fisier, inclusiv acele 4 caractere
	- apoi am adaugat cu ajutorul unui hex editor la final adresa functiei print_flag avand in vedere ca trebuie in little endian
	- dupa ce am mai testat o data ca in eax este adresa care trebuie am rulat normal binarul nice cu inputul generat
3. NAUGHTY_FLAG{1cfc40f75856f16b58bafc5b767e41b8}




//42 apoi 4 apoi restul pana la 85
// 48 apoi 4 apoi generez pana la 72
// 18 apoi 4 apoi pana la 46
// 242 apoi 4 apoi 2 apoi 4 apoi restul pana la final